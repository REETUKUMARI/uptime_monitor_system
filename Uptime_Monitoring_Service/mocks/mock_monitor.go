// Code generated by MockGen. DO NOT EDIT.
// Source: models/monitor.go

// Package models is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"
	database "website_status_checker/database"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockMonitorReposController is a mock of MonitorReposController interface
type MockMonitorReposController struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorReposControllerMockRecorder
}

// MockMonitorReposControllerMockRecorder is the mock recorder for MockMonitorReposController
type MockMonitorReposControllerMockRecorder struct {
	mock *MockMonitorReposController
}

// NewMockMonitorReposController creates a new mock instance
func NewMockMonitorReposController(ctrl *gomock.Controller) *MockMonitorReposController {
	mock := &MockMonitorReposController{ctrl: ctrl}
	mock.recorder = &MockMonitorReposControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitorReposController) EXPECT() *MockMonitorReposControllerMockRecorder {
	return m.recorder
}

// DatabaseSave mocks base method
func (m *MockMonitorReposController) DatabaseSave(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DatabaseSave", id)
}

// DatabaseSave indicates an expected call of DatabaseSave
func (mr *MockMonitorReposControllerMockRecorder) DatabaseSave(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseSave", reflect.TypeOf((*MockMonitorReposController)(nil).DatabaseSave), id)
}

// DatabaseGetURL mocks base method
func (m *MockMonitorReposController) DatabaseGetURL(urllink string) (database.Pingdom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseGetURL", urllink)
	ret0, _ := ret[0].(database.Pingdom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseGetURL indicates an expected call of DatabaseGetURL
func (mr *MockMonitorReposControllerMockRecorder) DatabaseGetURL(urllink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseGetURL", reflect.TypeOf((*MockMonitorReposController)(nil).DatabaseGetURL), urllink)
}

// DatabaseSaveFailureCount mocks base method
func (m *MockMonitorReposController) DatabaseSaveFailureCount(urllink string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DatabaseSaveFailureCount", urllink)
}

// DatabaseSaveFailureCount indicates an expected call of DatabaseSaveFailureCount
func (mr *MockMonitorReposControllerMockRecorder) DatabaseSaveFailureCount(urllink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseSaveFailureCount", reflect.TypeOf((*MockMonitorReposController)(nil).DatabaseSaveFailureCount), urllink)
}

// IncreaseFailureCount mocks base method
func (m *MockMonitorReposController) IncreaseFailureCount(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseFailureCount", id)
}

// IncreaseFailureCount indicates an expected call of IncreaseFailureCount
func (mr *MockMonitorReposControllerMockRecorder) IncreaseFailureCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseFailureCount", reflect.TypeOf((*MockMonitorReposController)(nil).IncreaseFailureCount), id)
}

// FailureCountToZero mocks base method
func (m *MockMonitorReposController) FailureCountToZero(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FailureCountToZero", id)
}

// FailureCountToZero indicates an expected call of FailureCountToZero
func (mr *MockMonitorReposControllerMockRecorder) FailureCountToZero(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailureCountToZero", reflect.TypeOf((*MockMonitorReposController)(nil).FailureCountToZero), id)
}

// UpdateStatus mocks base method
func (m *MockMonitorReposController) UpdateStatus(id uuid.UUID, st string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStatus", id, st)
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitorReposControllerMockRecorder) UpdateStatus(id, st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitorReposController)(nil).UpdateStatus), id, st)
}

// GetUrlData mocks base method
func (m *MockMonitorReposController) GetUrlData(urllink string) database.Pingdom {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlData", urllink)
	ret0, _ := ret[0].(database.Pingdom)
	return ret0
}

// GetUrlData indicates an expected call of GetUrlData
func (mr *MockMonitorReposControllerMockRecorder) GetUrlData(urllink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlData", reflect.TypeOf((*MockMonitorReposController)(nil).GetUrlData), urllink)
}

// GetRows mocks base method
func (m *MockMonitorReposController) GetRows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRows indicates an expected call of GetRows
func (mr *MockMonitorReposControllerMockRecorder) GetRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRows", reflect.TypeOf((*MockMonitorReposController)(nil).GetRows))
}
