// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repo.go

// Package repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	database "website_status_checker/database"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockReposController is a mock of ReposController interface
type MockReposController struct {
	ctrl     *gomock.Controller
	recorder *MockReposControllerMockRecorder
}

// MockReposControllerMockRecorder is the mock recorder for MockReposController
type MockReposControllerMockRecorder struct {
	mock *MockReposController
}

// NewMockReposController creates a new mock instance
func NewMockReposController(ctrl *gomock.Controller) *MockReposController {
	mock := &MockReposController{ctrl: ctrl}
	mock.recorder = &MockReposControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReposController) EXPECT() *MockReposControllerMockRecorder {
	return m.recorder
}

// DatabaseGet mocks base method
func (m *MockReposController) DatabaseGet(id uuid.UUID) (database.Pingdom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseGet", id)
	ret0, _ := ret[0].(database.Pingdom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseGet indicates an expected call of DatabaseGet
func (mr *MockReposControllerMockRecorder) DatabaseGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseGet", reflect.TypeOf((*MockReposController)(nil).DatabaseGet), id)
}

// DatabaseGets mocks base method
func (m *MockReposController) DatabaseGets(url *[]database.Pingdom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseGets", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseGets indicates an expected call of DatabaseGets
func (mr *MockReposControllerMockRecorder) DatabaseGets(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseGets", reflect.TypeOf((*MockReposController)(nil).DatabaseGets), url)
}

// DatabaseCreate mocks base method
func (m *MockReposController) DatabaseCreate(s string, c time.Duration, fre, fail int) (database.Pingdom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseCreate", s, c, fre, fail)
	ret0, _ := ret[0].(database.Pingdom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseCreate indicates an expected call of DatabaseCreate
func (mr *MockReposControllerMockRecorder) DatabaseCreate(s, c, fre, fail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseCreate", reflect.TypeOf((*MockReposController)(nil).DatabaseCreate), s, c, fre, fail)
}

// DatabaseDelete mocks base method
func (m *MockReposController) DatabaseDelete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseDelete indicates an expected call of DatabaseDelete
func (mr *MockReposControllerMockRecorder) DatabaseDelete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseDelete", reflect.TypeOf((*MockReposController)(nil).DatabaseDelete), id)
}

// DatabaseUpdate mocks base method
func (m *MockReposController) DatabaseUpdate(id uuid.UUID, c time.Duration, fre, fail int) (database.Pingdom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseUpdate", id, c, fre, fail)
	ret0, _ := ret[0].(database.Pingdom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseUpdate indicates an expected call of DatabaseUpdate
func (mr *MockReposControllerMockRecorder) DatabaseUpdate(id, c, fre, fail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseUpdate", reflect.TypeOf((*MockReposController)(nil).DatabaseUpdate), id, c, fre, fail)
}
